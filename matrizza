//1. Дана числовая матрица поменять местами два случайных столбца матрицы.
//2. Задана матрица mxm, произвольно заполненная числовыми элементами, вывести на экран  минимальный элементов матрицы.
//3. Найти все положительные элементы главной диагонали матрицы.
//4. Необходимо записать все элементы прямоугольной матрицы в одномерный массив(порядок следования-по столбцам).
//5. Необходимо создать матрицу, используя числа от 0 до 999. Вывести ее на экран,а так же посчитать количество всех однозначных, двузначных и трехзначных чисел этой матрицы.
//6. Задать с клавиатуры 2 равноразмерные матрицы , необходимо в ячейке третьей матрицы, точно такой же размерности, большие элементы из соответствующих двух ячеек этих матриц.
//7. Задана матрица произвольного размера. Необходимо изменить последовательность столбцов в матрице (чтобы элементы первой строки были отсортированы по возрастанию). Необходимо изменить
//последовательность строк (чтобы элементы первого столбца были отсортированы по возрастанию).

#include "stdafx.h"
#include <iostream>
#include <cstdlib>
#include <stdio.h>
using namespace std;

int main()
{
	setlocale(LC_ALL, "Rus");
	int A[5][5];
	//1.
	for (int i = 0;i < 5; i++)//ввод матрицы 
	{
		for (int j = 0; j < 5; j++)
					
				A[i][j] = rand() % 1000;			
		
	}
	cout << "Исходная матрица: " << endl;
	for (int i = 0;i < 5; i++)//вывод свтрицы
	{
		for (int j = 0; j < 5; j++)
			
			cout << A[i][j] << " ";
		cout << endl;
		
	}

	int a, b,k;//а- первый столбец, в-второй столбец, л-переменная, играющая роль "банки"
	cout << "Введите номера столбцов, которые бы вы хотети поменять местами(до 5)" << endl;
	cin >>a;
	cin >> b;
	for (int i = 0;i < 5; i++)//процесс замены
	{
		k = A[i][b-1];
		A[i][b-1] = A[i][a-1];
		A[i][a-1] = k;
		
	}
	cout << "Поменяем местами столбцы " << a << " " << b << endl;
	cout << "Получившаяся матрица: " << endl;
	for (int i = 0;i < 5; i++)//вывод матрицы
	{
		for (int j = 0; j < 5; j++)

			cout << A[i][j] << " ";
		cout << endl;


	}


	//2.
	int min = A[0][0];//переменная, отвечающая за минимальный элемент 
					  //посик минимального элемента матрицы
	for (int i = 0; i < 5; i++)
	{

		for (int j = 0; j < 5; j++)
		{
			if (A[i][j] < min)
				min = A[i][j];
		}
	}
	
	
	cout << "Мнимальный элемент матрицы: " << min<<"\n";
//3 задание.
	cout << "Все положительные элементы главной диагонали: ";
	for (int i = 0; i < 5; i++)//поиск положительных элементов гл диагонали
	{

		for (int j = 0; j < 5; j++)
		{
			if ((i == j) && (A[i][j]>0))//индексы равны и элемент больше нуля
			{
				 cout<< A[i][j]<<" ";
			}
				
		}
	}
	cout << endl;

	//4.
	int B[4][5];
	for (int i = 0;i < 4; i++)//ввод матрицы 
	{
		for (int j = 0; j < 5; j++)

			B[i][j] = rand() % 1000;

	}
	for (int i = 0;i < 4; i++)//вывод свтрицы
	{
		for (int j = 0; j < 5; j++)

			cout << B[i][j] << " ";
		cout << endl;

	}
	int S[20];//массив, куда записываются элементы матрицы
	int l = 0,c=0;
	k = 0;
	for (int k = 0; k < 20;)//переменная отвечает за индекс одномерного (нового) массива 
	{
		while (l < 5)//переменная  отвечает за столбец
		{
			for (int i = 0; i < 4;i++)
			{
				S[k] = B[i][l];
				k++;
			}
			l++;
		}
	}
		cout << "Получившаяся строка: ";
		for (int i = 0; i < 20; i++)
		{
			cout << S[i] << " " ;
		}

		cout << endl;

	//4.
		int C[5][5];//новая матрица 
		for (int i = 0;i < 5; i++)//ввод матрицы 
		{
			for (int j = 0; j < 5; j++)

			{
				C[i][j] = rand() % 1000;
				cout << C[i][j]<<" ";
			}
			cout << endl;
		}
		int k1 = 0, k2 = 0, k3 = 0;//к1-однозначные к2-двузначные к3-трехзначные 
		//поиск разряда чисел 
		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				if (C[i][j] / 10 == 0) 
					k1++;
				else {
					if (C[i][j] / 100 == 0)
						k2++;
					else {
						if (C[i][j] / 1000 == 0)
							k3++;
					}
				}
			}
		}
		cout << "Колличество однозначных чисел: " << k1 <<endl;
		cout << "Колличество двузначных чисел: " << k2 << endl;
		cout << "Колличество трехзначных чисел: " << k3 << endl;


		//6.
		int D[4][4], E[4][4], F[4][4];
		cout << "Введите первую матрицу: " << endl;
		for (int i = 0;i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
				cin>> D[i][j];
			
		}
		cout << "Введите вторую матрицу: "<<endl;
		for (int i = 0;i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
				cin>> E[i][j];
		}
		//выбирает больший из двух данных элемментов и больший записывает в новую матрицу 
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (D[i][j] > E[i][j])
					F[i][j] = D[i][j];
				else
					F[i][j] = E[i][j];			
			}
		}
		cout << "Исходные матрицы: " << endl;
		for (int i = 0;i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
				cout << D[i][j] << " ";
			cout << endl;
		}
		cout << endl;
		for (int i = 0;i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
				cout <<E[i][j] << " ";
			cout << endl;
		}
		cout << "Получившаяся матрица: " << endl;
		for (int i = 0;i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
				cout << F[i][j] << " ";
			cout << endl;
		}

		//7.
		
		int v;
		int G[4][4];//матрица , которая будет равна исходной (хранит значения исходной)
					//заполним ее
		for (int i = 0;i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
				G[i][j] = F[i][j];
		}
		//будем сравнивать два элемента , если левый больше правого, то поменяем столбцы, которые соответствуют номерам индексов , удовлетворяющих условию
		for (int x=0; x < 4; x++)
		{
			for (int y = 0; y < 3-x; y++)
			{
				if (F[0][y] > F[0][y + 1])
				{
					for (int i = 0;i < 4; i++)//процесс замены
					{
						v = F[i][y+1];
						F[i][y+1] = F[i][y];
						F[i][y] = v;

					}
				}
			}
		}

			cout << endl;
			cout << "поменяем в последней матрице столбцы местами так, чтобы элементы первой строки были отсортированы по возрастанию: " << "\n";
			cout << "Получившаяся матрица: " << endl;
			for (int i = 0;i < 4; i++)
			{
				for (int j = 0; j < 4; j++)
					cout << F[i][j] << " ";
				cout << endl;
			}
			//Проделаем аналогичные операции со столбцами 
			for (int x = 0; x < 4; x++)
			{
				for (int y = 0; y < 3 - x; y++)
				{
					if (F[y][0] > F[y+1][0])
					{
						for (int i = 0;i < 4; i++)//процесс замены
						{
							v = F[y+1][i];
							F[y+1][i] = F[y][i];
							F[y][i] = v;

						}
					}
				}
			}
			cout << endl;
			cout << "поменяем в последней матрице строки местами так, чтобы элементы первого столбца были отсортированы по возрастаниюЖ " << "\n";
			cout << "Получившаяся матрица: " << endl;
			for (int i = 0;i < 4; i++)
			{
				for (int j = 0; j < 4; j++)
					cout << F[i][j] << " ";
				cout << endl;
			}
//степень похожести
			int per = 0;//отвечает за количество схожих элементов
			//будем сравнивать соответствующие элементы исходной матрицы и той, что получилась в результате преобразований
			for (int i = 0;i < 4; i++)
			{
				for (int j = 0; j < 4; j++)
				{
					if (G[i][j] == F[i][j])
						per++;
				}
			}
			cout << "Степень похожести исходной \n и полученной матрицы после преобразования: " <<( per / 16.)* 100 << " процентов" << endl;
	system("pause");
    return 0;
	
}
